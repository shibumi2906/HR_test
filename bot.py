# bot.py
import os
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

import tempfile
from pathlib import Path

import pdfplumber
from docx import Document

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set. Put it in .env")

# –í aiogram 3.7+ parse_mode –ø–µ—Ä–µ–¥–∞—ë–º —á–µ—Ä–µ–∑ default=DefaultBotProperties(...)
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

def extract_text_from_pdf(path: Path) -> str:
    text_parts = []
    with pdfplumber.open(str(path)) as pdf:
        for page in pdf.pages:
            txt = page.extract_text() or ""
            if txt:
                text_parts.append(txt)
    return "\n".join(text_parts).strip()

def extract_text_from_docx(path: Path) -> str:
    doc = Document(str(path))
    return "\n".join(p.text for p in doc.paragraphs).strip()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—é–º–µ.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /resume ‚Äî –ø—Ä–∏—à–ª–∏ PDF –∏–ª–∏ DOCX, —è –≤—ã—Ç–∞—â—É —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ /search ‚Äî –ø–æ–∫–∞–∂—É 3 –∑–∞–≥–ª—É—à–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏"
    )

@dp.message(Command("resume"))
async def cmd_resume(message: Message):
    await message.answer("–ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ (PDF –∏–ª–∏ DOCX) –æ–¥–Ω–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.")

@dp.message(F.document)
async def handle_document(message: Message):
    doc = message.document
    filename = (doc.file_name or "").lower()

    if not (filename.endswith(".pdf") or filename.endswith(".docx")):
        await message.reply("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ç–æ–ª—å–∫–æ .pdf –∏ .docx üôè")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.TemporaryDirectory() as td:
        path = Path(td) / filename
        await bot.download(doc, destination=path)

        try:
            if filename.endswith(".pdf"):
                text = extract_text_from_pdf(path)
            else:
                text = extract_text_from_docx(path)
        except Exception as e:
            await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç: {e}")
            return

    if not text:
        await message.reply("–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Å–∫–∞–Ω).")
        return

    # Telegram –ª–∏–º–∏—Ç 4096 ‚Äî –¥–µ–ª–∞–µ–º —É—Å–µ—á—ë–Ω–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    preview = (text[:3500] + "‚Ä¶") if len(text) > 3500 else text
    await message.reply(f"<b>–¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ:</b>\n\n{preview}")

@dp.message(Command("search"))
async def cmd_search(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–∞–∫–∞–Ω—Å–∏—è 1 ‚Äî Data Analyst", callback_data="vacancy_1")],
        [InlineKeyboardButton(text="–í–∞–∫–∞–Ω—Å–∏—è 2 ‚Äî Python Dev",   callback_data="vacancy_2")],
        [InlineKeyboardButton(text="–í–∞–∫–∞–Ω—Å–∏—è 3 ‚Äî AI Engineer",  callback_data="vacancy_3")],
    ])
    await message.answer("–í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã –≤–∞–∫–∞–Ω—Å–∏–π:", reply_markup=kb)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

